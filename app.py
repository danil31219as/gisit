import datetime
import os
import pickle
import sqlite3

import numpy as np
import requests
from flask import Flask, render_template, request
from keras.preprocessing import image
from tensorflow.keras.models import load_model

from config import *

app = Flask(__name__)
model = load_model('fire.h5')
weather_model = pickle.load(open('fire-weather.pkl', 'rb'))


# conn = sqlite3.connect("main.db") # или :memory: чтобы сохранить в RAM

@app.route('/', methods=['POST', "GET"])
def fire():
    conn = sqlite3.connect("main.db")
    cursor = conn.cursor()
    geojson = {'size': '1200x500',
               'pn': '61.26751,128.787832,61.265818,128.792896,61.266024,128.798218,61.259215,128.80517,61.24935,128.822164,61.231097,128.839245,61.208245,128.875809,61.198446,128.882332,61.185501,128.873405,61.170108,128.862333,61.149448,128.834867,61.132712,128.839073,61.116257,128.834009,61.096184,128.83461,61.077469,128.822851,61.073401,128.808861,61.064681,128.769464,61.051431,128.743801,61.040711,128.724403,61.032897,128.69771,61.032294,128.68608,61.029364,128.673763,61.02774027,128.67174953,61.00720508,128.66509855,61.000166,128.669643,60.979895,128.672905,60.96336,128.692646,60.940856,128.675823,60.930099,128.664322,60.925427,128.643722,60.923342,128.615913,60.920339,128.587761,60.910075,128.569565,60.888034,128.552227,60.867984,128.538837,60.857285,128.499355,60.870407,128.462963,60.873332,128.417816,60.860713,128.384685,60.837969,128.337993,60.813367,128.309841,60.79394,128.274135,60.764777,128.259373,60.744985,128.255253,60.708892,128.272762,60.673263,128.256626,60.667208,128.220577,60.653078,128.158092,60.637594,128.12479,60.641129,128.078441,60.647525,128.045482,60.666536,128.026256,60.682174,127.995014,60.69982,127.940426,60.699484,127.89854,60.682342,127.866955,60.66930349,127.82345617,60.64910507,127.80256653,60.63439904,127.70763347,60.614017,127.660961,60.606941,127.630405,60.613175,127.568264,60.61589753,127.56465754,60.61070251,127.52176666,60.64496527,127.42761832,60.629681,127.419262,60.604245,127.391453,60.591604,127.347507,60.59124702,127.3220875,60.57297134,127.29940033,60.57611025,127.25225234,60.538794,127.206058,60.52731,127.157306,60.478456,127.124691,60.422581,127.097912,60.403935,127.081432,60.398847,127.032337,60.39773238,127.00437536,60.39241791,126.99832153,60.37489412,126.93224852,60.343005,126.896381,60.342835,126.852779,60.316493,126.809177,60.314283,126.748409,60.333151,126.712017,60.40624875,126.6708532,60.42505727,126.62571113,60.42736179,126.58991467,60.38485486,126.52047932,60.35974119,126.50424011,60.34702128,126.49571296,60.33405771,126.50933277,60.33161814,126.50903308,60.33102896,126.47486662,60.321763,126.461391,60.31254747,126.43440445,60.30116906,126.41633194,60.28326654,126.3756341,60.276175,126.370754,60.267322,126.342602,60.270897,126.325092,60.286387,126.28973,60.301529,126.268101,60.30802938,126.21123803,60.29743461,126.18227053,60.268173,126.183643,60.26343535,126.15411639,60.23423053,126.13044012,60.23237336,126.10609657,60.219099,126.084423,60.20983617,126.05867355,60.20779281,126.05444398,60.20732125,126.05429906,60.172172,126.045627,60.16805029,126.0422374,60.16802631,126.04223004,60.16801757,126.04221049,60.153382,126.030178,60.15352509,126.00982238,60.15234794,126.00719228,60.15151363,125.96785461,60.1538946,125.95725837,60.154065,125.933018,60.16126313,125.91878959,60.16206738,125.88693682,60.17733855,125.84648612,60.17761711,125.84643493,60.177977,125.84547,60.20436272,125.84151779,60.20793347,125.84086101,60.21615313,125.82100788,60.2233096,125.79881165,60.22034869,125.78392125,60.217053,125.778179,60.211595,125.743847,60.21179439,125.74090928,60.21144684,125.739162,60.21203469,125.6602622,60.20970839,125.62272976,60.199483,125.602398,60.189073,125.577335,60.18619009,125.5535552,60.18176969,125.53679152,60.17328215,125.50804627,60.17581449,125.46752295,60.18702949,125.43101454,60.27678685,125.38563677,60.47661397,125.38566341,60.501286,125.373573,60.52258,125.350227,60.530688,125.35572,60.538963,125.367737,60.540314,125.380783,60.54033892,125.38567195,60.55210877,125.38567352,60.56953812,125.3716507,60.6255139,125.30614246,60.625555,125.305853,60.62724838,125.30396609,60.65444565,125.24935913,60.67577362,125.17829132,60.69312466,125.13791407,60.693855,125.135221,60.693645,125.134105,60.69498094,125.13359309,60.69510651,125.13330078,60.69955826,125.09488678,60.72193413,125.05200691,60.721865,125.051536,60.722411,125.049562,60.721991,125.047245,60.722579,125.045185,60.723166,125.045442,60.72429637,125.0474783,60.72468606,125.04673119,60.724509,125.045356,60.725223,125.042438,60.72660221,125.04305748,60.72721677,125.04187919,60.727489,125.04055,60.729084,125.037889,60.729923,125.035314,60.731854,125.032825,60.732441,125.029993,60.734329,125.027761,60.73436387,125.02817433,60.73622513,125.0246048,60.73807185,125.02979967,60.738861,125.029049,60.739784,125.027675,60.741,125.028705,60.741587,125.028019,60.741671,125.026474,60.741,125.024843,60.741587,125.022011,60.742762,125.020036,60.743349,125.020294,60.743601,125.022182,60.744733,125.021324,60.745363,125.020036,60.746579,125.019178,60.746998,125.0142,60.745908,125.012827,60.746453,125.01111,60.746034,125.007162,60.747292,125.005445,60.749725,125.006904,60.752031,125.009908,60.753415,125.012998,60.754925,125.017891,60.754883,125.019178,60.757399,125.0251,60.760333,125.034284,60.763142,125.045013,60.763603,125.047245,60.762555,125.048189,60.763645,125.051708,60.76549,125.059261,60.766831,125.070419,60.767376,125.0772,60.768256,125.08501,60.771023,125.096082,60.772028,125.101232,60.773537,125.113163,60.77383,125.122604,60.775255,125.132904,60.77439253,125.13731928,60.79506554,125.38083789,60.86135488,125.66293388,60.862384,125.666256,60.864892,125.675869,60.86659916,125.68527602,60.86679819,125.68612403,60.870324,125.692692,60.873248,125.70076,60.878011,125.718269,60.879514,125.725307,60.882104,125.737152,60.886197,125.753631,60.888452,125.760669,60.889621,125.768737,60.890623,125.774059,60.89078546,125.77939239,60.91695296,125.87979341,60.97460839,126.01110786,61.07276272,126.18328945,61.06238328,126.43967591,61.0641,126.445083,61.066342,126.447658,61.067754,126.454181,61.069581,126.465168,61.069664,126.471348,61.068834,126.480789,61.069415,126.490059,61.071657,126.510658,61.073234,126.520271,61.074812,126.531086,61.076888,126.544132,61.078216,126.550998,61.080042,126.5625,61.081454,126.570396,61.082948,126.582927,61.084442,126.596317,61.08461974,126.60278671,61.09416787,126.64785718,61.10051004,126.8879479,61.08004837,126.98925612,61.080623,126.993713,61.079876,127.010193,61.079046,127.017574,61.079046,127.02144865,61.08164616,127.12059169,61.082699,127.124176,61.083861,127.129497,61.084027,127.135334,61.083197,127.142887,61.083695,127.151127,61.083778,127.159538,61.08279127,127.16425696,61.08355215,127.19327159,61.09449093,127.31376959,61.097304,127.32399,61.105102,127.351627,61.107259,127.361068,61.109581,127.375145,61.11265,127.390079,61.113728,127.395744,61.116879,127.423896,61.119035,127.443294,61.123677,127.473678,61.127159,127.491874,61.1318,127.514534,61.13538421,127.53309344,61.14258482,127.55852581,61.14393407,127.56994698,61.147792,127.585087,61.149614,127.594871,61.151519,127.603111,61.152844,127.612381,61.154666,127.619075,61.155494,127.628517,61.157482,127.646026,61.159055,127.653751,61.161622,127.669544,61.16452,127.686882,61.169818,127.718982,61.172632,127.740268,61.174371,127.758293,61.175695,127.773742,61.177019,127.783355,61.178674,127.791595,61.179833,127.800007,61.181239,127.805843,61.182067,127.815799,61.182729,127.833824,61.185128,127.855282,61.185459,127.860946,61.185459,127.872619,61.185956,127.887554,61.187279,127.904377,61.188769,127.918281,61.191498,127.932357,61.194145,127.944717,61.194559,127.948494,61.194642,127.953644,61.197206,127.965316,61.200762,127.989349,61.201506,127.996902,61.20316,128.006515,61.206467,128.015098,61.211345,128.028488,61.214569,128.038273,61.216718,128.048572,61.219528,128.062477,61.221016,128.075695,61.222586,128.086338,61.22366,128.089599,61.223743,128.093376,61.225809,128.096981,61.226635,128.101959,61.227544,128.106079,61.229031,128.112774,61.22994,128.12273,61.230188,128.133373,61.23056,128.139209,61.230147,128.141527,61.230229,128.149509,61.229775,128.158436,61.229734,128.168134,61.228783,128.188648,61.227503,128.203582,61.226387,128.212251,61.223991,128.22401,61.221718,128.234653,61.219942,128.243923,61.219115,128.252592,61.218206,128.260832,61.216636,128.270788,61.214941,128.279371,61.213246,128.287096,61.212626,128.29319,61.212254,128.292846,61.211882,128.298425,61.211097,128.312845,61.210022,128.328809,61.208782,128.340912,61.20779,128.347521,61.206467,128.356275,61.2036427,128.37264761,61.22090174,128.52660415,61.222173,128.531885,61.223289,128.537721,61.2249,128.549137,61.226429,128.560295,61.226924,128.563986,61.227751,128.57274,61.22899,128.58201,61.231923,128.600464,61.232129,128.605613,61.233451,128.611364,61.234938,128.618145,61.237127,128.623466,61.242083,128.63265,61.244891,128.639345,61.246707,128.644752,61.248442,128.650932,61.24968,128.655395,61.250423,128.658142,61.250299,128.658743,61.248937,128.657283,61.248813,128.659601,61.24935,128.665695,61.249969,128.67711,61.250795,128.687238,61.251579,128.694877,61.253272,128.7014,61.256698,128.712129,61.260825,128.726806,61.262558,128.733244,61.263507,128.738308,61.264456,128.748007,61.265158,128.751697,61.265158,128.755302,61.266272,128.760709,61.265364,128.772468,61.266767,128.776674,61.26784,128.780708,61.26784,128.783626,61.26751,128.787832',
               'pt': []}

    if request.method == 'POST':
        key, val = list(request.files.items())[0]
        val.save('photos/' + val.filename)
        lat, lon = request.form.get('lat'), request.form.get('lon')
        img = image.load_img('photos/' + val.filename, target_size=(224, 224))
        os.remove('photos/' + val.filename)
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0) / 255
        classes = model.predict(x)

        cursor.execute(
            f"INSERT INTO photos ('lat', 'lon', 'result', 'level') VALUES ({lat}, {lon}, '{np.argmax(classes[0]) == 0}', {max(classes[0])})")
        conn.commit()
    value_damage = check_weather()
    print(value_damage)
    if value_damage > 5000:
        geojson['pn'] += '~c:fc8077~f:fc8077aa'
    elif value_damage > 2000:
        geojson['pn'] += '~c:fcd077~f:fcd077aa'
    elif value_damage > 0:
        geojson['pn'] += '~c:fafc77~f:fafc77aa'
    else:
        geojson['pn'] += '~c:77fc94~f:77fc94aa'
    #geojson['pn'] += '~c:ffe800~f:ffe800aa'
    for id, lat, lon, result, level in cursor.execute("select * from photos"):
        print(bool(result), type(lat))
        geojson['pt'].append(str(lat) + ',' + str(lon))
        if result:
            if level < 0.3:
                geojson['pt'][-1] += '~c:yw~s:l'
            elif level > 0.7:
                geojson['pt'][-1] += '~c:rd~s:l'
            else:
                geojson['pt'][-1] += '~c:oe~s:l'
        else:
            geojson['pt'][-1] += '~c:gn~s:l'
    print(geojson['pt'])
    return render_template('index.html', **{
        'map': requests.get('https://static.maps.2gis.com/1.0',
                            params=geojson).url})


def check_weather():
    d_v = {'s': 180, 'n': 0, 'nw': 315, 'ne': 45, 'e': 90, 'w': 270, 'se': 135,
           'sw': 225, 'c': 0}
    data = []
    curr_time = datetime.datetime.now()
    infile = open('weather.txt', 'r').read()
    last_time = datetime.datetime.strptime(infile.split('\n')[0],
                                           '%d.%m.%Y-%H:%M')
    if (curr_time - last_time).seconds >= 1200:
        h = {'X-Yandex-API-Key': API_KEY}
        p = {'lat': '61.1293',
             'lon': '127.518', 'lang': 'ru_RU'
             }
        response = requests.get('https://api.weather.yandex.ru/v2/informers?',
                                params=p, headers=h).json()
        data.append(datetime.datetime.now().month)
        data.append(d_v[response['fact']['wind_dir']])
        data.append(response['fact']['wind_speed'])
        data.append(response['forecast']['parts'][0]['prec_mm'])
        data.append(response['fact']['temp'])
        data.append(response['fact']['humidity'])
        data.append(response['fact']['pressure_pa'])
        predict = weather_model.predict([data])
        with open('weather.txt', 'w') as f:
            f.write(datetime.datetime.now().strftime('%d.%m.%Y-%H:%M'))
            f.write('\n')
            f.write(' '.join(list(map(str, data))))
        return predict[0]
    data = list(map(float, infile.split('\n')[1].split()))
    predict = weather_model.predict([data])
    return predict[0]


if __name__ == '__main__':
    app.run()
